{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","handleChanged","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98165584.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport uuid from 'uuid/dist/v4';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n\r\n\r\n    //CREANDO STATE DE CITAS ----> tendremos un objeto con todos los campos\r\n    const [cita, actualizarCita] = useState({\r\n                                                mascota: '',\r\n                                                propietario: '',\r\n                                                fecha: '',\r\n                                                hora: '',\r\n                                                sintomas: ''    \r\n                                            }); \r\n    \r\n    const [error, actualizarError] = useState(false); // boolean false y true cuando haya error o no\r\n\r\n\r\n    \r\n\r\n    const handleChanged = (e) => {\r\n        \r\n        \r\n\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name] : e.target.value\r\n        })\r\n        \r\n    }\r\n\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n    //Cuando el usuario presiona en Agregar Cita\r\n\r\n    const submitCita = e => {\r\n\r\n        e.preventDefault(); // para que no envie el formulario antes de la validacion\r\n\r\n        //VALIDAR\r\n        \r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n        \r\n        //ELIMINAMOS EL MSJ DE ERROR\r\n        actualizarError(false);\r\n\r\n        //ASIGNAR UN ID\r\n\r\n        cita.id = uuid();\r\n\r\n        //CREAR LA CITA\r\n\r\n        crearCita(cita);\r\n\r\n        //RESETEAR FORM\r\n\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''    \r\n        }); \r\n    }\r\n\r\n\r\n    return ( \r\n        <>\r\n            <h2>Crear Cita</h2>\r\n            \r\n            {error ? <p className=\"alerta-error\">Tienes que llenar todos los campos</p> : null }\r\n\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\" \r\n                    onChange = {handleChanged}    \r\n                    value = {mascota}           \r\n                />    \r\n                <label>Nombre Dueño</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Dueño de mascota\" \r\n                    onChange = {handleChanged}    \r\n                    value = {propietario}               \r\n                />\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"       \r\n                    onChange = {handleChanged}    \r\n                    value = {fecha}       \r\n                />   \r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\" \r\n                    onChange = {handleChanged} \r\n                    value = {hora}                 \r\n                />   \r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    onChange = {handleChanged}   \r\n                    value = {sintomas} \r\n                ></textarea>    \r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                    \r\n                \r\n                >Agregar Cita</button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n \r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Cita = ({cita, eliminarCita}) =>(\r\n    <div className= 'cita'>\r\n        <p>Mascota: <span>{cita.mascota}</span></p>    \r\n        <p>Propietario: <span>{cita.propietario}</span></p>   \r\n        <p>Hora: <span>{cita.hora}</span></p>       \r\n        <p>Fecha: <span>{cita.fecha}</span></p>   \r\n        <p>Sintomas: <span>{cita.sintomas}</span></p>   \r\n\r\n        <button \r\n        \r\n        className = \"button-primary eliminar u-full-width\"\r\n        onClick= {() => eliminarCita(cita.id)}\r\n\r\n        >Eliminar</button>\r\n\r\n    </div>\r\n\r\n    \r\n  );\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Cita;","import React, {useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n  \n  // CITAS EN EL LOCAL STORAGE\n\n  let citasIniciales = JSON.parse(localStorage.getItem('citas')); // para leer lo de local storage se usa JSON\n\n  if(!citasIniciales){\n    citasIniciales=[];\n  }\n\n  // ARREGLO DE CITAS\n\n  const [citas, guardarCitas] = useState(citasIniciales); // arreglo de citas\n\n  //   USE EFFECT PARA REALIZAR CIERTAS OPERACIONES CUANDO EL STATE CAMBIA\n  const listo = () => {\n    // console.log(\"listo\")\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    \n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas));\n    }else{\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }\n  useEffect( listo, [citas] ); \n\n  //funcion para guardar las citas actuales y agregue la nueva\n\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n  // FUNCION PARA ELIMINAR CITAS\n\n  const eliminarCita = id => {\n    // console.log(id)  \n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas)\n  }\n\n\n  // TITULO \n\n  const titulo = (citas.length === 0) ? 'No hay citas' : 'Administra tus citas'\n\n  return (\n    \n    <>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n\n          <div className=\"one-half column\">\n            <Formulario \n              crearCita = {crearCita}\n            />\n          </div>\n               \n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita \n              key = {cita.id}  \n              cita = {cita}   \n              eliminarCita = {eliminarCita}       \n              />  \n            ))}\n              \n          </div>\n\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}